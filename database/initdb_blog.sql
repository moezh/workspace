CREATE TABLE blog_config (
    name VARCHAR(255) PRIMARY KEY NOT NULL,
    value TEXT NOT NULL
);

INSERT INTO blog_config (name, value)
VALUES 
('subdomain','blog'),
('tags','docker,nodejs,expressjs,nextjs,tailwindcss,typescript,postgresql');

CREATE TABLE blog_posts (
    id VARCHAR(255) PRIMARY KEY NOT NULL,
    title VARCHAR(255) NOT NULL,
    tags VARCHAR(255) NOT NULL,
    summary VARCHAR(1000) NOT NULL,
    content_html TEXT NOT NULL
);

INSERT INTO blog_posts (id, title, tags, summary, content_html)
VALUES 
('install-docker-on-ubuntu','Installing the Latest Version of Docker on Ubuntu 20.04.1 LTS', 'docker', 'Learn how to install the latest version of Docker on Ubuntu 20.04.1 LTS in a few easy steps. This guide covers all the necessary steps, from updating existing packages to adding the official Docker repository and starting the Docker service. By the end of this post, you will have Docker up and running on your system.', '<p>Installing Docker on Ubuntu 20.04.1 LTS is a simple process. In this guide, we will go through the steps needed to install the latest version of Docker on your system.</p><br><p><b>Step 1: Update existing packages</b></p><p>Start by updating your existing packages by running the following command:</p><br><div style="border:1px solid #ccc;padding:5px 10px; margin-top:8px; margin-bottom:8px">sudo apt update</div><br><p><b>Step 2: Install dependencies</b></p><p>Next, you will need to install some dependencies that are required for Docker to run. You can do this by running the following command:</p><br><div style="border:1px solid #ccc;padding:5px 10px; margin-top:8px; margin-bottom:8px">sudo apt install apt-transport-https ca-certificates curl software-properties-common</div><br><p><b>Step 3: Add the Docker repository</b></p><p>Once the dependencies are installed, you can add the official Docker repository to your system by running the following command:</p><br><div style="border:1px solid #ccc;padding:5px 10px; margin-top:8px; margin-bottom:8px">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -<br>sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</div><br><p><b>Step 4: Install Docker</b></p><p>With the repository added, you can now update your package list and install the latest version of Docker by running the following command:</p><br><div style="border:1px solid #ccc;padding:5px 10px; margin-top:8px; margin-bottom:8px">sudo apt update<br>sudo apt install docker-ce</div><br><p><b>Step 5: Start the Docker service</b></p><p>After the installation is complete, you can start the Docker service by running the following command:</p><br><div style="border:1px solid #ccc;padding:5px 10px; margin-top:8px; margin-bottom:8px">sudo systemctl start docker</div><br><p><b>Step 6: Enable the service</b></p><p>To ensure that Docker starts automatically at boot time, you can enable the service with this command:</p><br><div style="border:1px solid #ccc;padding:5px 10px; margin-top:8px; margin-bottom:8px">sudo systemctl enable docker</div><br><p><b>Step 7: Add your user to the docker group</b></p><p>Before running any docker command, you need to add your user to the docker group with this command:</p><br><div style="border:1px solid #ccc;padding:5px 10px; margin-top:8px; margin-bottom:8px">sudo usermod -aG docker $USER</div><p>This will allow you to run docker commands without the need of using &#39;sudo&#39; every time.</p><br><p><b>Check Installation</b></p><p>To check that the installation is working correctly, you can run the following command:</p><br><div style="border:1px solid #ccc;padding:5px 10px; margin-top:8px; margin-bottom:8px">docker version</div><p>This command will return the version of the Docker installed on your system, and also it will show you the version of the client and the version of the server.</p><br>'),
('docker-compose-secrets','Securing Your Multi-Container Applications with Docker Compose Secrets', 'docker', 'Learn how to use Docker Compose''s secrets feature to securely manage sensitive information in your multi-container applications. By using the secrets field in the docker-compose.yml file, you can keep sensitive information separate from your application code and out of version control, ensuring that sensitive information is not accidentally leaked or exposed.', '<p>Docker Compose is a powerful tool that enables developers to easily define and run multi-container applications. One of the key features of Docker Compose is the ability to store and manage sensitive information, such as passwords and API keys, using the <b>secrets</b> field in the <b>docker-compose.yml</b> file.</p><br><p>The <b>secrets</b> field allows developers to keep sensitive information separate from the application code and out of version control. This is important because it ensures that sensitive information is not accidentally leaked or exposed.</p><br><p>To use the secrets field, you first need to define the secret in the docker-compose.yml file. Here''s an example of how to do this:</p><br><div style="border:1px solid #ccc;padding:5px 10px; margin-top:8px; margin-bottom:8px">services:<br>&nbsp;&nbsp;&nbsp;app:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;secrets:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- mysecret<br><br>secrets:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mysecret:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file: secret.txt<br></div><br><p>This tells Docker Compose to create a secret called <b>mysecret</b> and to reference the contents of the <b>secret.txt</b> file. The <b>services</b> block define the services that are part of your application, and <b>app</b> is one of them. The <b>secrets</b> field under the services block tells compose to use the secret <b>mysecret</b> for this service, and the <b>secrets</b> field at the root level, defines the secret.</p><br><p>Once the secret is defined, it can be accessed by your application in the container at the <b>/run/secrets/mysecret</b> location.</p><br><p>It is important to note that the <b>secret.txt</b> file should be in the same directory as your <b>docker-compose.yml</b> file and it should be ignored from version control.</p><br><p>This feature is available on Docker version 1.13 and higher, so you should check your version before using this feature.</p><br><p>Using the <b>secrets</b> field in Docker Compose is a simple and secure way to manage sensitive information in your application. It allows you to keep your secrets separate from your application code and out of version control, ensuring that sensitive information is not accidentally leaked or exposed.</p><br><p>In conclusion, using the <b>secrets</b> feature in Docker Compose is a must for any developer who is looking for a secure and efficient way to manage sensitive information in their application.</p>');